from dataclasses import dataclass, asdict
import json
import os
import subprocess
import traceback
from typing import Sequence
import uuid
from pathlib import Path

from dotenv import find_dotenv, load_dotenv
from langchain_core.language_models import LanguageModelLike
from langchain_core.runnables import RunnableConfig
from langchain_core.tools import BaseTool, tool
from langchain_anthropic import ChatAnthropic
from langgraph.prebuilt import create_react_agent
from langgraph.checkpoint.memory import InMemorySaver

from debug_tools import DebugGenerator
from models import Bank, Customer, WorkItem

load_dotenv(find_dotenv())


class DocumentTypeDetector:
    DOCUMENT_TYPES = ["–°—á—ë—Ç", "–ê–∫—Ç", "–ö–∞—Ä—Ç–æ—á–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"]

    def detect_document_type(self, user_input: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
        user_lower = user_input.lower()

        if any(word in user_lower for word in ["–∞–∫—Ç", "act"]):
            return "–ê–∫—Ç"
        elif any(word in user_lower for word in ["—Å—á—ë—Ç", "—Å—á–µ—Ç", "invoice"]):
            return "–°—á—ë—Ç"
        elif any(word in user_lower for word in ["–∫–∞—Ä—Ç–æ—á–∫–∞", "—Ä–µ–∫–≤–∏–∑–∏—Ç—ã", "–∫–∞—Ä—Ç"]):
            return "–ö–∞—Ä—Ç–æ—á–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"
        else:
            return None


class LLMAgent:
    def __init__(self, model: LanguageModelLike, tools: Sequence[BaseTool]):
        self._model = model
        self._agent = create_react_agent(model, tools=tools, checkpointer=InMemorySaver())
        self._config: RunnableConfig = {"configurable": {"thread_id": uuid.uuid4().hex}}

    def invoke(self, content: str, temperature: float = 0.1) -> str:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç"""
        message = {"role": "user", "content": content}
        return self._agent.invoke(
            {"messages": [message], "temperature": temperature},
            config=self._config
        )["messages"][-1].content


def print_agent_response(llm_response: str) -> None:
    print(f"\033[35m{llm_response}\033[0m")


def get_user_prompt() -> str:
    return input("\n–í—ã: ")


def main():

    model = ChatAnthropic(
        model="claude-3-haiku-20240307",
        temperature=0.1,
        max_tokens=2048,
        anthropic_api_key=os.getenv('ANTHROPIC_API_KEY')
    )

    detector = DocumentTypeDetector()
    agent = LLMAgent(model, tools=[
        DebugGenerator.generate_pdf_act,
        DebugGenerator.generate_pdf_invoice,
        DebugGenerator.generate_pdf_org_card
    ])

    print("üöÄ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ò–ü –ê–Ω–≥–∞—Ä—Ö–∞–µ–≤–∞ (–†–ï–ñ–ò–ú –û–¢–õ–ê–î–ö–ò)")
    print("=" * 50)

    # –û–¢–õ–ê–î–ö–ê: –ó–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # first_question = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ö–∞–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç —Ö–æ—Ç–∏—Ç–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å?"
    # print(f"Assistant: {first_question}")
    # user_input = input("–í—ã: ")
    org_slug = "ip_angarhaeva"
    org_type = "ip"
    user_input = "–∫–∞—Ä—Ç–æ—á–∫–∞"  # –û–¢–õ–ê–î–ö–ê: –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–æ
    print(f"[–û–¢–õ–ê–î–ö–ê] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª: {user_input}")

    document_type = None
    while not document_type:
        document_type = detector.detect_document_type(user_input)
        if not document_type:
            # print("Assistant: –Ø –Ω–µ —Å–º–æ–≥ –ø–æ–Ω—è—Ç—å, –∫–∞–∫–æ–π –≤–∏–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å.")
            # print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: –ê–∫—Ç, –°—á—ë—Ç, –ö–∞—Ä—Ç–æ—á–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏")
            # user_input = input("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ: ")
            user_input = "–∞–∫—Ç"  # –û–¢–õ–ê–î–ö–ê: –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–æ
            print(f"[–û–¢–õ–ê–î–ö–ê] –ü–µ—Ä–µ—Å–ø—Ä–æ—Å, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª: {user_input}")

    print(f"‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {document_type}")

    if document_type == "–ö–∞—Ä—Ç–æ—á–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏":
        print("–°–æ–∑–¥–∞—é –∫–∞—Ä—Ç–æ—á–∫—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏...")
        result = DebugGenerator.generate_pdf_org_card(org_slug , org_type)
        print(f"Assistant: {result}")
        return


    print("\n[–û–¢–õ–ê–î–ö–ê] –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")

    test_customer = Customer(
        name='–ú–ê–£ "–°–°"',
        inn="0323347497",
        ogrn="1030300123456",
        kpp="032301001",
        address="670031, –ë—É—Ä—è—Ç–∏—è –†–µ—Å–ø, –£–ª–∞–Ω-–£–¥—ç –≥, –®–∏—Ä–æ–∫–∏—Ö-–ü–æ–ª—è–Ω—Å–∫–æ–≥–æ —É–ª, –¥–æ–º ‚Ññ 50",
        work_phone="8-983-458-24-95",
        signatory="–ò–≤–∞–Ω–æ–≤ –ò.–ò."
    )

    test_jobs = [
        WorkItem(
            task='–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –ö–ö–¢ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –Ω–∞ 1 –º–µ—Å—è—Ü. –ü–∞–∫–µ—Ç "–°–ï–†–í–ò–° Lite"',
            price=600,
            quantity=10
        )
    ]

    print(f"[–û–¢–õ–ê–î–ö–ê] –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑—á–∏–∫: {test_customer.name}")
    print(f"[–û–¢–õ–ê–î–ö–ê] –¢–µ—Å—Ç–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã: {len(test_jobs)} —à—Ç")


    try:
        if document_type == "–ê–∫—Ç":
            print("\n[–û–¢–õ–ê–î–ö–ê] –í—ã–∑—ã–≤–∞–µ–º debug_generate_pdf_act...")
            result = DebugGenerator.generate_pdf_act(
                customer=test_customer,
                jobs=test_jobs,
                org_slug=org_slug,
                org_type=org_type
            )
            print(f"[–û–¢–õ–ê–î–ö–ê] –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        elif document_type == "–°—á—ë—Ç":
            print("\n[–û–¢–õ–ê–î–ö–ê] –í—ã–∑—ã–≤–∞–µ–º debug_generate_pdf_invoice...")
            result = DebugGenerator.generate_pdf_invoice(test_customer, test_jobs)
            print(f"[–û–¢–õ–ê–î–ö–ê] –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    except Exception as e:
        print(f"[–û–¢–õ–ê–î–ö–ê] –û–®–ò–ë–ö–ê: {type(e).__name__}: {e}")
        import traceback
        print(f"[–û–¢–õ–ê–î–ö–ê] –ü–æ–ª–Ω—ã–π —Ç—Ä–µ–π—Å–±–µ–∫:")
        traceback.print_exc()


    """
    system_prompt = f'''
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å: {document_type}

    –¢–≤–æ—è –∑–∞–¥–∞—á–∞ —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—á–∏–∫–∞ –ø–æ—ç—Ç–∞–ø–Ω–æ:
    1. –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏  
    2. –ò–ù–ù
    3. –û–ì–†–ù
    4. –ê–¥—Ä–µ—Å
    5. –ü–æ–¥–ø–∏—Å–∞–Ω—Ç
    6. –î–∞–Ω–Ω—ã–µ –æ —Ä–∞–±–æ—Ç–∞—Ö (–Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ü–µ–Ω–∞)

    –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç.
    –ù–∞—á–Ω–∏ —Å –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.
    '''

    agent_response = agent.invoke(content=system_prompt)

    while True:
        print_agent_response(agent_response)
        user_input = get_user_prompt()

        if user_input.lower() in ['–≤—ã—Ö–æ–¥', 'quit', 'exit']:
            print("üëã –î–æ—Å–≤–∏–¥–∞–Ω–∏—è!")
            break

        agent_response = agent.invoke(user_input)

        if "‚úÖ PDF" in agent_response:
            print("\nüéâ –î–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤!")
            next_action = input("–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ—â—ë –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç? (–¥–∞/–Ω–µ—Ç): ")
            if next_action.lower() in ['–¥–∞', 'yes', 'y']:
                main()
            break
    """


if __name__ == "__main__":
    main()